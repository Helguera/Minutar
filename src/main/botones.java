/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Component;
import static java.awt.Label.CENTER;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import static java.util.Objects.hash;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.JToggleButton;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Sociograph
 */
public class botones extends javax.swing.JPanel {

    private Controlador controlador;
    private ArrayList<String> elementos;
    private ArrayList<String> zonas;
    private boolean[] muestraPanel = {false, false, false, false, false, false};

    private String lastButton = null;

    /**
     * Creates new form botones
     *
     * @param controlador
     */
    @SuppressWarnings("empty-statement")
    public botones(Controlador controlador) {
        this.controlador = controlador;

        elementos = controlador.getElementos();
        zonas = controlador.getZonas();

        initComponents();
        tabbed.removeAll();
        tabbed.addTab("Configuracion", pnlConfig);

        //Crea boton y etiqueta por cada elemento leido del txt
        cargaElementos();

        //Crea un boton zona por cada zona leida del txt
        cargaZonas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo = new javax.swing.ButtonGroup();
        tabbed = new javax.swing.JTabbedPane();
        pnlConfig = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        chk_elementos = new javax.swing.JCheckBox();
        chk_zonas = new javax.swing.JCheckBox();
        chk_personajes = new javax.swing.JCheckBox();
        chk_tramas = new javax.swing.JCheckBox();
        chk_secuencias = new javax.swing.JCheckBox();
        chk_escenas = new javax.swing.JCheckBox();
        scroll_elementos = new javax.swing.JScrollPane();
        pnlElementos = new javax.swing.JPanel();
        scroll_zonas = new javax.swing.JScrollPane();
        pnlZonas = new javax.swing.JPanel();
        scroll_personajes = new javax.swing.JScrollPane();
        scroll_tramas = new javax.swing.JScrollPane();
        scroll_secuencias = new javax.swing.JScrollPane();
        scroll_escenas = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        tabbed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedStateChanged(evt);
            }
        });

        pnlConfig.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setText("AudioVisual");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setText("Exp. en Tienda");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        pnlConfig.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        chk_elementos.setText("Elementos");
        chk_elementos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_elementosItemStateChanged(evt);
            }
        });
        chk_elementos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chk_elementosStateChanged(evt);
            }
        });
        chk_elementos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chk_elementosMouseClicked(evt);
            }
        });
        chk_elementos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_elementosActionPerformed(evt);
            }
        });
        jPanel2.add(chk_elementos);

        chk_zonas.setText("Zonas");
        chk_zonas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_zonasItemStateChanged(evt);
            }
        });
        chk_zonas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_zonasActionPerformed(evt);
            }
        });
        jPanel2.add(chk_zonas);

        chk_personajes.setText("Personajes");
        chk_personajes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_personajesItemStateChanged(evt);
            }
        });
        chk_personajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_personajesActionPerformed(evt);
            }
        });
        jPanel2.add(chk_personajes);

        chk_tramas.setText("Tramas");
        chk_tramas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_tramasItemStateChanged(evt);
            }
        });
        chk_tramas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_tramasActionPerformed(evt);
            }
        });
        jPanel2.add(chk_tramas);

        chk_secuencias.setText("Secuencias");
        chk_secuencias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_secuenciasItemStateChanged(evt);
            }
        });
        jPanel2.add(chk_secuencias);

        chk_escenas.setText("Escenas");
        chk_escenas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chk_escenasItemStateChanged(evt);
            }
        });
        jPanel2.add(chk_escenas);

        pnlConfig.add(jPanel2, java.awt.BorderLayout.CENTER);

        tabbed.addTab("Configuraci√≥n", pnlConfig);

        scroll_elementos.setViewport(null);

        pnlElementos.setLayout(new java.awt.GridLayout(0, 2));
        scroll_elementos.setViewportView(pnlElementos);

        tabbed.addTab("Elementos", scroll_elementos);

        pnlZonas.setLayout(new java.awt.GridLayout(0, 2));
        scroll_zonas.setViewportView(pnlZonas);

        tabbed.addTab("Zonas", scroll_zonas);
        tabbed.addTab("Personajes", scroll_personajes);
        tabbed.addTab("Tramas", scroll_tramas);
        tabbed.addTab("Secuencias", scroll_secuencias);
        tabbed.addTab("Escenas", scroll_escenas);

        add(tabbed, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//Boton AV

        chk_elementos.setSelected(false);
        chk_zonas.setSelected(false);
        chk_personajes.setSelected(true);
        chk_tramas.setSelected(true);
        chk_secuencias.setSelected(true);
        chk_escenas.setSelected(true);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void tabbedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedStateChanged
        // TODO add your handling code here:
        controlador.cambiaTabla(tabbed.getSelectedIndex());
    }//GEN-LAST:event_tabbedStateChanged

    private void chk_zonasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_zonasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chk_zonasActionPerformed

    private void chk_tramasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_tramasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chk_tramasActionPerformed

    private void chk_personajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_personajesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chk_personajesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //pollote
        chk_elementos.setSelected(true);
        chk_zonas.setSelected(true);
        chk_escenas.setSelected(false);
        chk_tramas.setSelected(false);
        chk_secuencias.setSelected(false);
        chk_personajes.setSelected(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chk_elementosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chk_elementosStateChanged


    }//GEN-LAST:event_chk_elementosStateChanged

    private void chk_elementosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_elementosActionPerformed


    }//GEN-LAST:event_chk_elementosActionPerformed

    private void chk_elementosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chk_elementosMouseClicked

    }//GEN-LAST:event_chk_elementosMouseClicked

    private void chk_elementosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_elementosItemStateChanged
        if (!muestraPanel[0]) {
            tabbed.addTab("Elementos", scroll_elementos);
            muestraPanel[0] = true;
        } else {
            tabbed.remove(scroll_elementos);
            muestraPanel[0] = false;
        }
    }//GEN-LAST:event_chk_elementosItemStateChanged

    private void chk_zonasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_zonasItemStateChanged
        if (!muestraPanel[1]) {
            tabbed.addTab("Zonas", scroll_zonas);
            muestraPanel[1] = true;
        } else {
            tabbed.remove(scroll_zonas);
            muestraPanel[1] = false;
        }
    }//GEN-LAST:event_chk_zonasItemStateChanged

    private void chk_personajesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_personajesItemStateChanged
        if (!muestraPanel[2]) {
            tabbed.addTab("Personajes", scroll_personajes);
            muestraPanel[2] = true;
        } else {
            tabbed.remove(scroll_personajes);
            muestraPanel[2] = false;
        }
    }//GEN-LAST:event_chk_personajesItemStateChanged

    private void chk_tramasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_tramasItemStateChanged
        if (!muestraPanel[3]) {
            tabbed.addTab("Tramas", scroll_tramas);
            muestraPanel[3] = true;
        } else {
            tabbed.remove(scroll_tramas);
            muestraPanel[3] = false;
        }    }//GEN-LAST:event_chk_tramasItemStateChanged

    private void chk_secuenciasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_secuenciasItemStateChanged
        if (!muestraPanel[4]) {
            tabbed.addTab("Secuencias", scroll_secuencias);
            muestraPanel[4] = true;
        } else {
            tabbed.remove(scroll_secuencias);
            muestraPanel[4] = false;
        }
    }//GEN-LAST:event_chk_secuenciasItemStateChanged

    private void chk_escenasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chk_escenasItemStateChanged
        if (!muestraPanel[5]) {
            tabbed.addTab("Escenas", scroll_escenas);
            muestraPanel[5] = true;
        } else {
            tabbed.remove(scroll_escenas);
            muestraPanel[5] = false;
        }    }//GEN-LAST:event_chk_escenasItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chk_elementos;
    private javax.swing.JCheckBox chk_escenas;
    private javax.swing.JCheckBox chk_personajes;
    private javax.swing.JCheckBox chk_secuencias;
    private javax.swing.JCheckBox chk_tramas;
    private javax.swing.JCheckBox chk_zonas;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pnlConfig;
    private javax.swing.JPanel pnlElementos;
    private javax.swing.JPanel pnlZonas;
    private javax.swing.JScrollPane scroll_elementos;
    private javax.swing.JScrollPane scroll_escenas;
    private javax.swing.JScrollPane scroll_personajes;
    private javax.swing.JScrollPane scroll_secuencias;
    private javax.swing.JScrollPane scroll_tramas;
    private javax.swing.JScrollPane scroll_zonas;
    private javax.swing.JTabbedPane tabbed;
    // End of variables declaration//GEN-END:variables

    private void cargaElementos() {
        for (int i = 0; i < elementos.size(); i++) {
            JToggleButton boton = new JToggleButton();
            boton.setText("Inicio");
            boton.setVisible(true);
            boton.setName("Boton" + i);
            boton.addActionListener((ActionEvent e) -> {
                Component comp[] = pnlElementos.getComponents();
                int pos = 0;
                for (int j = 0; j < comp.length; j++) {
                    if (e.getSource().hashCode() == (comp[j].hashCode())) {
                        pos = j;
                    }
                }

                // comp[pos].setEnabled(false);
                if (boton.isSelected()) {
                    /*TODO: Montar un mapa que contenga como clave el id, hashcode, nuemro o lo que sea del boton presionado
                         y como valor el n√∫mero de l√≠nea asociado a ese bot√≥n, de tal forma que cuando se pulse se crea un nuevo par
                         y al despulsarse se elimina, teniendo siempre acceso a que l√≠nea hay que modificar en funci√≥n del bot√≥n pulsado
                         Queda ver donde va mejor este mapa, en principio la idea es en controlador*/
                    boton.setText("Fin");
                    controlador.getLineaBoton().put(boton.getName(), controlador.getNumLineaElementos());
                    controlador.addRowElementos(new Object[]{controlador.getNumLineaElementos(), controlador.getTime(), "", comp[pos + 1].getName()});
                    controlador.incrementaNumLineaElementos();

                } else {
                    boton.setText("Inicio");

                    Iterator it = controlador.getLineaBoton().entrySet().iterator();
                    while (it.hasNext()) {
                        Map.Entry pair = (Map.Entry) it.next();
                        if (pair.getKey().equals(boton.getName())) {
                            controlador.setFinElemento((int) pair.getValue());
                            controlador.getLineaBoton().remove(pair.getKey());
                            it.remove(); // avoids a ConcurrentModificationException
                        }
                    }

                }

            });

            pnlElementos.add(boton);
            pnlElementos.updateUI();

            JLabel etiqueta = new JLabel();
            etiqueta.setText(elementos.get(i));
            etiqueta.setHorizontalAlignment(JLabel.CENTER);
            etiqueta.setVisible(true);
            etiqueta.setName(elementos.get(i));
            pnlElementos.add(etiqueta);
            pnlElementos.updateUI();

        }
        pnlElementos.setVisible(true);
    }

    private void cargaZonas() {
        for (int i = 0; i < zonas.size(); i++) {
            JToggleButton boton = new JToggleButton();
            boton.setText(zonas.get(i));
            boton.setVisible(true);
            boton.setName(zonas.get(i));
            grupo.add(boton);
            boton.addActionListener((ActionEvent e) -> {
                Component comp[] = pnlZonas.getComponents();
                int pos = 0;
                for (int j = 0; j < comp.length; j++) {
                    if (e.getSource().hashCode() == (comp[j].hashCode())) {
                        pos = j;
                    }
                }

                // comp[pos].setEnabled(false);
                if (boton.isSelected()) {

                    /*TODO: Montar un mapa que contenga como clave el id, hashcode, nuemro o lo que sea del boton presionado
                         y como valor el n√∫mero de l√≠nea asociado a ese bot√≥n, de tal forma que cuando se pulse se crea un nuevo par
                         y al despulsarse se elimina, teniendo siempre acceso a que l√≠nea hay que modificar en funci√≥n del bot√≥n pulsado
                         Queda ver donde va mejor este mapa, en principio la idea es en controlador*/
                    controlador.getLineaBoton().put(boton.getName(), controlador.getNumLineaZonas());
                    controlador.addRowZonas(new Object[]{controlador.getNumLineaZonas(), controlador.getTime(), "", comp[pos + 0].getName()});
                    controlador.incrementaNumLineaZonas();

                    if (lastButton == null) {

                    } else {
                        controlador.setFinZonas(controlador.getNumLineaZonas() - 2);
                    }

                    /*} else {
                        System.out.println("fafasf");
                        Iterator it = controlador.getLineaBoton().entrySet().iterator();
                        while (it.hasNext()) {
                            Map.Entry pair = (Map.Entry) it.next();
                            if (pair.getKey().equals(lastButton)) {
                                controlador.setFinZonas((int) pair.getValue());
                                controlador.getLineaBoton().remove(pair.getKey());
                                it.remove(); // avoids a ConcurrentModificationException
                            }
                        }

                        
                    }*/
                    lastButton = boton.getName();

                } else {
                    System.out.println("fafasf");
                    Iterator it = controlador.getLineaBoton().entrySet().iterator();
                    while (it.hasNext()) {
                        Map.Entry pair = (Map.Entry) it.next();
                        if (pair.getKey().equals(boton.getName())) {
                            controlador.setFinZonas((int) pair.getValue());
                            controlador.getLineaBoton().remove(pair.getKey());
                            it.remove(); // avoids a ConcurrentModificationException
                        }
                    }
                }
            });

            pnlZonas.add(boton);
            pnlZonas.updateUI();

        }
        pnlElementos.setVisible(true);

    }

}
